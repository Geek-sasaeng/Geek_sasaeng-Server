# This is a basic workflow to help you get started with Actions

name: geeksasaeng develop branch CI/CD

# Controls when the workflow will run
on:
  push:
    branches: [ develop ]

env:
  S3_BUCKET_NAME: geeksasaeng-s3

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:

    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    steps:
#      # ssh로 외부에서 직접 명령어 입력
#      - name: executing remote ssh commands using ssh key
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.REMOTE_IP }}
#          username: ${{ secrets.REMOTE_SSH_ID }}
#          key: ${{ secrets.REMOTE_SSH_KEY }}
#          port: ${{ secrets.REMOTE_SSH_PORT }}
#          script: |
#            cd /var/www/Geek_sasaeng-Server
#            sudo git pull origin develop
#            sudo ./gradlew clean build
#            sudo nohup java -jar geeksasaeng-0.0.1-SNAPSHOT.jar &

      - run: ls -al
      - uses: actions/checkout@v2
#        with:
#          ref: develop

      # 현재 workflow를 실행한 refs/heads/branch를 '/'를 기준으로 array형태로 vBranch에 저장
      # vBranch array중에 2번째(branch)를 branch에 저장
      # set-env
#      - name: Set an Environment Variable # add an environment variable step
#        run: |
#            IFS='/' read -ra vBranch <<< "$GITHUB_REF"
#            branch=${vBranch[1]}
#            echo "::set-env name=BRANCH::$branch"


      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      # 전송할 파일을 담을 디렉토리 생성
      - name: Make Directory
        run: mkdir -p deploy

      # Jar 파일 복사
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy

      # appspec.yml 파일 복사
      - name: Copy appspec.yml
        run: cp appspec.yml ./deploy

      # script files 복사
      - name: Copy script
        run: cp ./scripts/*.sh ./deploy

      # 압축파일 형태로 전달
      - name: Make zip file
        run: zip -r ./geeksasaeng.zip ./deploy
        shell: bash

      # S3 Bucket으로 copy
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./geeksasaeng.zip s3://$S3_BUCKET_NAME/

      # Deploy
      # application-name: [만든 애플리케이션 이름]
      # deployment-group-name: [만든 애플리케이션 그룹 이름]
      # s3-location bucket: [S3버킷이름], key=[S3버킷 속 압축파일]
      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws deploy create-deployment \
          --application-name geeksasaeng \
          --deployment-group-name geeksasaeng-group \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=geeksasaeng-s3,bundleType=zip,key=geeksasaeng.zip \
          --region ap-northeast-2
#
##      - name: Deploy                  # S3에 배포하기
##        env:
##          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
##          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
##        run: |
##          aws s3 cp \
##            --recursive \
##            --region ap-northeast-2 \
##            build s3://github-actions-dh/$BRANCH # 위에서 shell script로 작성한 현재 실행 중인 branch명을 사용, 해당 branch 디렉토리로 배포